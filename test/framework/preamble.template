<% // This file contains the preamble for mock recordings, as an underscore template

// Helper function to handle possibly null values
function q(value) {
  if (value === null) {
    return 'null';
  } else {
    return '\'' + value + '\'';
  }
}

%>// This file has been autogenerated.

var profile = require('../../lib/util/profile');

exports.getMockedProfile = function () {
  var newProfile = new profile.Profile();

<% if (!sub.environment.isPublicEnvironment) {
%>  newProfile.addEnvironment(new profile.Environment({
    name: '<%= sub.environment.name %>',
    portalUrl: <%= q(sub.environment.portalUrl) %>,
    publishingProfileUrl: <%= q(sub.environment.publishingProfileUrl) %>,
    managementEndpointUrl: <%= q(sub.environment.managementEndpointUrl) %>,
    resourceManagerEndpointUrl: <%= q(sub.environment.resourceManagerEndpointUrl) %>,
    sqlManagementEndpointUrl: <%= q(sub.environment.sqlManagementEndpointUrl) %>,
    hostNameSuffix: <%= q(sub.environment.hostNameSuffix) %>,
    sqlServerHostNameSuffix: <%= q(sub.environment.sqlServerHostnameSuffix) %>,
    activeDirectoryEndpointUrl: <%= q(sub.environment.activeDirectoryEndpointUrl) %>,
    commonTenantName: <%= q(sub.environment.commonTenantName) %>,
    storageEndpoint: <%= q(sub.environment.storageEndpoint) %>,
    galleryEndpointUrl: <%= q(sub.environment.galleryEndpointUrl) %>
  }));

<% }
%>  newProfile.addSubscription(new profile.Subscription({
<% Object.keys(sub).forEach(function(key) {
  switch (key) {
    case '_events':
    case 'environment':
    case 'values':
    case 'isDefault':
      // skip these, don't need them
      break;

    case 'managementCertificate':
%>    managementCertificate: {
      key: 'mockedKey',
      cert: 'mockedCert'
    },
<%
      break;
    case 'username':
%>    username: 'user@domain.example',
<%
      break;
    case 'user':
%>    user: {
      name: 'user@domain.example',
<%
      if(sub.user.type === 'user') {
%>      type: 'user'
    },
<%    } 
      else if(sub.user.type === 'servicePrincipal') {
%>      type: 'servicePrincipal'
    },
<%    }
      break;
    case 'accessToken':
%>    accessToken: {
      accessToken: 'mockedToken',
      refreshToken: 'mockedToken',
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
    },
<%
      break;

    case 'registeredProviders':
    case 'registeredResourceNamespaces':
%>    <%= key %>: [<%= sub[key].map(function (k) { return '\'' + k + '\''; }).join(', ') %>],
<%
      break;

    default:
%>    <%= key %>: '<%= sub[key] %>',
<%
      break;
  };
});
%>    isDefault: true
  }, newProfile.environments['<%= sub.environment.name %>']));

  return newProfile;
};

exports.setEnvironment = function() {
<% requiredEnvironment.forEach(function (e) {
    var value;
    if (e.secure && typeof e.secure === 'function') {
      value = q(e.secure(process.env[e.name]));
    } else if (e.secure) {
      value = q('dummy');
    } else {
      value = q(process.env[e.name]);
    }
%>  process.env[<%= q(e.name) %>] = <%= value %>;
<% });
%>}

exports.scopes = [